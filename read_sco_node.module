<?php
/**
 * @file
 * A block module that parses sco and uses it
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function read_sco_node_help($path, $arg) {
  switch ($path) {
    case "admin/help#Read_sco_node":
      return '<p>' . t("ale3andro lives here!") . '</p>';
      break;
  }
} 

/**
 * Implements hook_block_info().
 */
function read_sco_node_block_info() {
  $blocks['read_sco_node'] = array(
    // The name that will appear in the block list.
    'info' => t('Saved sco nodes'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}


function read_sco_node_contents() {
  
  $max_num = variable_get('read_sco_node_max', 3);
  return db_select('sco_node', 'sn')
		->fields('sn', array('nid', 'sco_path', 'sco_manifest'))
		->range(0, $max_num)
		->execute();         
}

/**
 * Implements hook_block_view().
 */
function read_sco_node_block_view($delta = '') {
  switch ($delta) {
    case 'read_sco_node':
      $block['subject'] = t('Sco nodes in database');
      if (user_access('access content')) {
		$result = read_sco_node_contents();
		$items = array();
		foreach ($result as $node) {
			$manifest = unserialize($node->sco_manifest);
			$data = $node->sco_path . "<br />Identifier: " . $manifest->identifier;
			$data = $data . "<br />Schema: " . $manifest->schema;
			$data = $data . "<br />Organizations:<br />";
			foreach ($manifest->organizations as $organization) {
				$data = $data . "-----id: " . $organization->id;
			}
			
			$items[] = array('data' => t($data),);
		}
		if (empty($items)) {
			$block['content'] = t('Cannot find sco nodes saved in the db');
		}
		else {
			$block['content'] = theme('item_list', array('items' => $items));
		}
      }
      return $block;
  }
} 


/**
 * Implements hook_menu().
 */
function read_sco_node_menu() {
  $items = array();

  $items['admin/config/content/read_sco_node'] = array(
    'title' => 'Saved sco nodes',
    'description' => 'Displays all the saved sco_nodes in the database',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('read_sco_node_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback: Read sco node settings
 *
 * @see read_sco_node_menu()
 */
function read_sco_node_form($form, &$form_state) {
  $values = array();
  $options = array();
  $data = read_sco_node_contents();
  $counter=0;
  foreach($data as $node) {
	  $counter++;
	  $manifest = unserialize($node->sco_manifest);
	  $values['sco' . $counter] = $manifest;
	  $options[$node->nid] = $manifest->identifier;
  } 
  
  $form['select_sco_node'] = array(
    '#type' => 'select',
    '#title' => t('Select a sco node to parse data from'),
    '#default_value' => variable_get('read_sco_node_max', 3),
    '#options' => $options,
    '#description' => t('Select a sco node to parse data from'),
    '#required' => TRUE,
  );
    $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Go!',
  );
  //return system_settings_form($form);	
  return $form;
}

function data_parser($base, $fields) {
	$retVal = [];
	foreach ($fields as $key) {
		if (array_key_exists($key, $base))
			$retVal[$key] = $base->$key;
		else
			$retVal[$key] = 'not defined';
	}
	return $retVal;
}


function read_sco_node_form_submit($form, &$form_state) {
		
	$selected_sco_node = $form_state['values']['select_sco_node'];
	$sco_node = node_load($selected_sco_node);
	//debug($sco_node);
	
	// manifest -01-
	$manifestFields = ["schemaversion", "schemabase"];
	if (array_key_exists('sco_manifest', $sco_node)) {
		$node_sco_manifest = data_parser($sco_node->sco_manifest, $manifestFields);
		
		$node_sco_manifest_to_save = new stdClass();
		$node_sco_manifest_to_save->title = "custom Manifest: " . date("Y-m-d") . "--" . date("h:i:sa");
		$node_sco_manifest_to_save->type = "sco_manifest";
		node_object_prepare($node_sco_manifest_to_save);
		$node_sco_manifest_to_save->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
		$node_sco_manifest_to_save->status = 1; //(1 or 0): published or not
		$node_sco_manifest_to_save->promote = 0; //(1 or 0): promoted to front page
		$node_sco_manifest_to_save->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
		$node_sco_manifest_to_save->body[LANGUAGE_NONE][0]['value'] = "Manifest";
		$node_sco_manifest_to_save->field_manifestversion[LANGUAGE_NONE][0]['value'] = $node_sco_manifest['schemaversion'];
		$node_sco_manifest_to_save->field_manifestbase[LANGUAGE_NONE][0]['value'] = $node_sco_manifest['schemabase'];
		$node_sco_manifest_to_save = node_submit($node_sco_manifest_to_save); // Prepare node for saving
		node_save($node_sco_manifest_to_save);
		debug('sco_manifest node created successfully');
	}
	else
		debug('Cannot find sco_manifest key');
	
	
	if (array_key_exists('resources', $sco_node->sco_manifest)) {
		foreach ($sco_node->sco_manifest->resources as $resource)
		{
			// resource -04-
			$resourceFields = ["type", "base", "scormType"];
			$node_sco_resource = data_parser($resource, $resourceFields);
			
			// files -02-
			if (array_key_exists('files', $resource)) {
				foreach ($resource->files as $key => $value) 
				{
					//debug('File: ' . $value);
					continue;
				}
			}
			else {
				//debug('files not found');
				continue;
			}
		}
	} else {
		debug('Cannot find resources key');
	}
	
	if (array_key_exists('organizations', $sco_node->sco_manifest)) {
		foreach ($sco_node->sco_manifest->organizations as $organization)
		{
			// organization -04-
			$organizationFields = ["OrganizationStructure", "OrganizationTitle", "GlobalObjectives"];
			$node_organization = data_parser($organization, $organizationFields);
							
			if (array_key_exists('items', $organization)) {
				foreach ($organization->items as $item) {
					//items -03-
					$itemFields = ["title", "MinProgress", "Parameters", "Presentation", "progressWeight", "Item", "timelimitaction", "NavigationInterface", "lmsdata"];
					$sco_items = data_parser($item, $itemFields);
				}
			}
			else {
				debug('files not found');
			}
		}
	} else {
		debug('Cannot find organizations key');
	}
	
	
	//$node = node_load(4);
	//$node->body[LANGUAGE_NONE][0]['value'] = "ale3andro made me!";
	//node_save($node);
	//$block['subject'] = "hello, world!";
	//drupal_set_message(t('The form has been submitted -->' . $sco_Manifest->field_manifestbase[LANGUAGE_NONE][0]['value']));
	//debug($selected_sco_node);
	//$node->field_body[LANGUAGE_NONE][0]['value']='The body text';
	//node_save($node);
	//debug($node);
	
	/*
	$newNode = new stdClass();
	$newNode->title = "custom Manifest";
	$newNode->type = "sco_manifest";
	node_object_prepare($newNode);
	$newNode->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
	$newNode->status = 1; //(1 or 0): published or not
	$newNode->promote = 0; //(1 or 0): promoted to front page
	$newNode->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
	
	$newNode = node_submit($newNode); // Prepare node for saving
	$newNode->body[LANGUAGE_NONE][0]['value'] = "ale3andro made me!";

	node_save($newNode);
	*/
	
}


?>

